
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #STA 250 HOMEWORK 4
> #YICHUAN WANG
> #PROBLEM 2
> 
> #load necessary packages
> library(coda)
> library(mvtnorm)
> library(MASS)
> library(msm)
> 
> #CPU function for Probit MCMC
> probit_mcmc_cpu = function(
+   y,           # vector of length n
+   X,           # (n x p) design matrix
+   beta_0,      # (p x 1) prior mean
+   Sigma_0_inv, # (p x p) prior precision
+   niter,       # number of post burnin iterations
+   burnin      # number of burnin iterations
+ ){
+   #create matrix to store MCMC results for beta
+   beta = matrix(0, nrow = length(beta_0), ncol = burnin + niter+1)
+   beta[,1] = beta_0
+   #posterior variance matrix for beta's
+   Sigma.post = ginv(Sigma_0_inv + t(X) %*% X)
+   #pre-allocate vector z
+   z = numeric(length(y))
+   for (i in 2:ncol(beta)){
+     #sample z_k's
+     for (k in 1:length(y)) {
+       if (y[k] == 0) {
+         z[k] = rtnorm(1, mean = X[k,] %*% beta[,i-1], upper = 0)
+       }
+       else {
+         z[k] = rtnorm(1, mean = X[k,] %*% beta[,i-1], lower = 0)
+       }
+     }
+     beta[,i] = rmvnorm(n=1, mean = Sigma.post %*% (Sigma_0_inv %*% beta_0+t(X) %*% z),
+                        sigma=Sigma.post)
+   }
+   return(as.mcmc(t(beta[,(burnin+2):ncol(beta)])))
+ }
> 
> dat = read.table("~/Desktop/SkyDrive/STA 250/Stuff/HW4/data_01.txt",header = TRUE)
