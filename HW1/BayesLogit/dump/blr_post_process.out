
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ## Post-process a large-scale validation run:
> ##
> 
> # Start from clean workspace:
> rm(list=ls())
> 
> # Load in validation functions:
> source("validation_funcs.R")
> 
> ## Handle batch job arguments:
> 
> # 1-indexed version is used now.
> args <- commandArgs(TRUE)
> #args <- 4
> 
> cat(paste0("Command-line arguments:\n"))
Command-line arguments:
> print(args)
character(0)
> 
> # Read in all of the quantiles:
> total_num_sims     <- 200
> num_sims_completed <- 200
> sim_start <- 1000
> 
> ##################################
> coverplot_name <- "coverage_line_plot.pdf"
> resdir <- "results/"
> pardir <- "data/"
> verbose <- TRUE
> ###################################
> 
> ## Read in the posterior quantiles and true parameter values:
> qlist      <- list(NULL)
> truth      <- list(NULL)
> num_so_far <- 0
> 
> for (iter in 1:(num_sims_completed))
+ {
+   num_so_far <- num_so_far+1
+   sim_num <- sim_start + iter
+   outfile_res <- paste0(resdir,"blr_res_",sim_num,".csv")
+   outfile_par <- paste0(pardir,"blr_pars_",sim_num,".csv")
+   qs <- try(read.csv(outfile_res,header=FALSE),silent=TRUE)
+   ps <- try(read.csv(outfile_par,header=TRUE),silent=TRUE)
+ 
+   if (class(qs)!="try-error")
+   {
+     if (any(dim(qs)!=c(99,2))){
+       warning(paste0("File: ",outfile_res," does not have 99 rows and 2 columns!"))
+       qlist[[num_so_far]] <- NULL
+     } else {
+       # Extract results:
+       qlist[[num_so_far]] <- t(as.matrix(qs))
+       rownames(qlist[[num_so_far]]) <- c("beta_0","beta_1")
+     }  
+   } else {
+     qlist[[num_so_far]] <- NULL
+   }
+ 
+   if (class(ps)!="try-error")
+   {
+     if (any(dim(ps)!=c(2,1))){
+       warning(paste0("File: ",outfile_par," does not have 2 rows and 1 column!"))
+       truth[[num_so_far]] <- NULL
+     } else {
+       # Extract results:
+       truth[[num_so_far]] <- as.numeric(ps[,1])
+     }  
+   } else {
+     truth[[num_so_far]] <- NULL
+   }
+   
+   if ( (iter%%100)==0 && verbose) {
+     cat(paste0("Dataset ", iter, " has been read...\n"))
+   }
+ 
+   
+ } # END for loop over iter: num_sims_completed
Dataset 100 has been read...
Dataset 200 has been read...
> 
> 
> cat("Computing Validation statistics of MCMC draws...\n")   
Computing Validation statistics of MCMC draws...
> 
> ## Compute coverage proportions:
> 
> # Find first successful non-NULL qlist:
> for (i in 1:(num_sims_completed)){
+   if (!is.null(qlist[[i]])){
+     all.par.names <- rownames(qlist[[i]])
+     break
+   }
+ }
> 
> coverage_out      <- cover_func(X=qlist,truth=truth,type='one-sided',return.type='all')
> cover_indicators  <- coverage_out$indicators
> prop_cover        <- coverage_out$proportions
> successful_dataset_indices <- coverage_out$successful_dataset_indices
> num_sims_successfully_completed <- length(successful_dataset_indices)
> 
> ####
> ## logical(0) for datasets not analyzed
> ####
> 
> cat(paste0("\nThere were ",num_sims_successfully_completed," datasets that were successfully analyzed...\n"))

There were 200 datasets that were successfully analyzed...
> 
> ## Create nice looking table for results:
> p_table <- prop_cover
> cat("\nCoverage table:\n\n")

Coverage table:

> print(round(p_table,3))
       [,1]  [,2] [,3]  [,4]  [,5]  [,6]  [,7] [,8]  [,9] [,10] [,11] [,12]
beta_0 0.01 0.025 0.03 0.055 0.065 0.075 0.085 0.09 0.090 0.105  0.11 0.125
beta_1 0.01 0.015 0.02 0.025 0.030 0.035 0.045 0.05 0.055 0.060  0.07 0.080
       [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
beta_0  0.15 0.175  0.18 0.185 0.185 0.200 0.205 0.215 0.215 0.220 0.220  0.23
beta_1  0.09 0.090  0.10 0.120 0.155 0.165 0.170 0.180 0.195 0.195 0.195  0.20
       [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36]
beta_0 0.265 0.275 0.285 0.290 0.295 0.310 0.315  0.32 0.325 0.335 0.345  0.35
beta_1 0.200 0.205 0.210 0.215 0.235 0.245 0.260  0.28 0.290 0.300 0.305  0.32
       [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48]
beta_0 0.355 0.380 0.395 0.400  0.42 0.425 0.445 0.445 0.460 0.465 0.485 0.490
beta_1 0.345 0.355 0.375 0.385  0.39 0.400 0.405 0.425 0.435 0.455 0.455 0.455
       [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60]
beta_0 0.505  0.52 0.525  0.53 0.535 0.540 0.550 0.575 0.585 0.590  0.60 0.605
beta_1 0.465  0.48 0.490  0.50 0.520 0.525 0.525 0.540 0.555 0.565  0.57 0.575
       [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72]
beta_0 0.610  0.61 0.620 0.625 0.635  0.65 0.650  0.65 0.670 0.685  0.72  0.72
beta_1 0.595  0.60 0.605 0.630 0.635  0.65 0.655  0.66 0.675 0.685  0.69  0.71
       [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84]
beta_0 0.730  0.74 0.760  0.76 0.765 0.780 0.785 0.790 0.805  0.81  0.83 0.845
beta_1 0.735  0.76 0.765  0.77 0.775 0.775 0.780 0.795 0.800  0.82  0.83 0.830
       [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96]
beta_0  0.85 0.855  0.87 0.870 0.875 0.915 0.920  0.92 0.925 0.925 0.935 0.955
beta_1  0.84 0.845  0.86 0.865 0.875 0.875 0.895  0.91 0.920 0.945 0.950 0.950
       [,97] [,98] [,99]
beta_0 0.965  0.97 0.990
beta_1 0.965  0.98 0.995
> 
> ## Print latex output in convenient form:
> library(xtable)
> 
> p_keep <- c(1,5,10,25,50,75,90,95,99)
> cov_summary <- round(t(p_table)[p_keep,],4)
> rownames(cov_summary) <- sprintf("p_%02d",p_keep)
> 
> sink("coverage_summaries.tex")
> print(xtable(cov_summary))
> sink()
> 
> sink("coverage_summaries.txt")
> print(cov_summary)
> sink()
> 
> ## Make some plots of the results:
> actual_coverage  <- prop_cover
> desired_coverage <- seq(0.01,0.99,by=0.01)
> 
> cat("Making global coverage plot...\n") 
Making global coverage plot...
> pdf(coverplot_name)
> global_coverage_plot(desired_coverage=desired_coverage,actual_coverage=t(actual_coverage),bands=TRUE,num_sims=num_sims_successfully_completed)
NULL
> dev.off()
null device 
          1 
> 
> 
